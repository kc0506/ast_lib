# Generated by scripts/transform_visitor_pyi.py from reducer.proto.pyi

import ast
from typing import TYPE_CHECKING, Callable, Generator, Literal, TypedDict, Unpack
from .core import Hook, HookProvider
from .utils import DescriptorHelper

if TYPE_CHECKING:
    from ..pattern import MatchResult, MatchTypeHint
type ReducerHookMode = Literal["before", "after"]  # ? Do we have to use protocol

class PartialReducerOptions[
    N: ast.AST,
    *Args,
    Kwargs: dict,
](TypedDict, total=False):
    mode: ReducerHookMode
    before: tuple[str, ...]
    pattern: str | None

    # This is generally not that useful because we have to type hint in decorated function either way

    match_type_hint: MatchTypeHint[N, *Args, Kwargs]

class ReducerOptions[
    N: ast.AST,
    *Args,
    Kwargs: dict,
](TypedDict, total=True):
    mode: ReducerHookMode
    before: tuple[str, ...]
    pattern: str | None
    match_type_hint: MatchTypeHint[N, *Args, Kwargs]

# ------------------------------- Base Reducer ------------------------------- #

class NodeReducer[
    VisitorT: ast.NodeVisitor,
    N: ast.AST,
    T,
    *Args,
    Kwargs: dict,
](HookProvider, DescriptorHelper):
    def __init__(
        self,
        node_types: type[N] | tuple[type[N], ...],
        initial_value: Callable[[], T] | T,
        reducer: Callable[[T, N], T]
        | Callable[[VisitorT, T, N], T]
        | Callable[[VisitorT, T, N, MatchResult[N, *Args, Kwargs]], T],
        #
        **kwargs: Unpack[PartialReducerOptions],
        #
        # visitor_type: type[VisitorT] | None = None,  # only used for type hint
    ): ...
    def __get__(self, instance: VisitorT, owner: type[VisitorT]) -> T: ...
    def get_hook(self) -> Hook: ...

def node_reducer[VisitorT: ast.NodeVisitor, N: ast.AST, T, *Args, Kwargs: dict](
    # This do not need union
    *node_types: type[N],
    initial_value: Callable[[], T] | T,
    #
    **kwargs: Unpack[PartialReducerOptions],
    #
    # return_type: type[T] | None = None,  # only used for type hint
) -> Callable[
    [
        Callable[[T, N], T]
        | Callable[[VisitorT, T, N], T]
        | Callable[[VisitorT, T, N, MatchResult[N, *Args, Kwargs]], T]
    ],
    NodeReducer[VisitorT, N, T, *Args, Kwargs],
]: ...

# ----------------------------------- List ----------------------------------- #

class NodeListCollector[
    VisitorT: ast.NodeVisitor,
    N: ast.AST,
    Value,
    *Args,
    Kwargs: dict,
](NodeReducer[VisitorT, N, list[Value], *Args, Kwargs]):
    def __init__(
        self,
        node_types: type[N] | tuple[type[N], ...],
        get_value: Callable[[N], Generator[Value] | Value]
        | Callable[[VisitorT, N], Generator[Value] | Value]
        | Callable[
            [VisitorT, N, MatchResult[N, *Args, Kwargs]], Generator[Value] | Value
        ],
        #
        **kwargs: Unpack[PartialReducerOptions],
    ): ...

def nodelist_collector[
    VisitorT: ast.NodeVisitor,
    N: ast.AST,
    Value,
    *Args,
    Kwargs: dict,
](
    *node_types: type[N],
    #
    **kwargs: Unpack[PartialReducerOptions],
) -> Callable[
    [
        Callable[[N], Generator[Value] | Value]
        | Callable[[VisitorT, N], Generator[Value] | Value]
        | Callable[
            [VisitorT, N, MatchResult[N, *Args, Kwargs]], Generator[Value] | Value
        ]
    ],
    NodeListCollector[VisitorT, N, Value, *Args, Kwargs],
]: ...

# ------------------------------------ Set ----------------------------------- #

class NodeSetCollector[
    VisitorT: ast.NodeVisitor,
    N: ast.AST,
    Value,
    *Args,
    Kwargs: dict,
](NodeReducer[VisitorT, N, set[Value], *Args, Kwargs]):
    def __init__(
        self,
        node_types: type[N] | tuple[type[N], ...],
        get_value: Callable[[N], Generator[Value] | Value]
        | Callable[[VisitorT, N], Generator[Value] | Value]
        | Callable[
            [VisitorT, N, MatchResult[N, *Args, Kwargs]], Generator[Value] | Value
        ],
        #
        **kwargs: Unpack[PartialReducerOptions],
    ): ...

def nodeset_collector[
    VisitorT: ast.NodeVisitor,
    N: ast.AST,
    Value,
    *Args,
    Kwargs: dict,
](
    *node_types: type[N],
    #
    **kwargs: Unpack[PartialReducerOptions],
) -> Callable[
    [
        Callable[[N], Generator[Value] | Value]
        | Callable[[VisitorT, N], Generator[Value] | Value]
        | Callable[
            [VisitorT, N, MatchResult[N, *Args, Kwargs]], Generator[Value] | Value
        ]
    ],
    NodeSetCollector[VisitorT, N, Value, *Args, Kwargs],
]: ...

# ------------------------------------ Map ----------------------------------- #

class NodeMapCollector[
    VisitorT: ast.NodeVisitor,
    N: ast.AST,
    Key,
    Value,
    *Args,
    Kwargs: dict,
](NodeReducer[VisitorT, N, dict[Key, Value], *Args, Kwargs]):
    def __init__(
        self,
        node_types: type[N] | tuple[type[N], ...],
        get_value: Callable[[N], Value]
        | Callable[[VisitorT, N], Value]
        | Callable[[VisitorT, N, MatchResult[N, *Args, Kwargs]], Value],
        #
        get_key: Callable[[N], Key]
        | Callable[[VisitorT, N], Key]
        | Callable[
            [VisitorT, N, MatchResult[N, *Args, Kwargs]], Key
        ] = lambda node: node,
        #
        **kwargs: Unpack[PartialReducerOptions],
    ): ...

def nodemap_collector[
    VisitorT: ast.NodeVisitor,
    N: ast.AST,
    Key,
    Value,
    *Args,
    Kwargs: dict,
](
    *node_types: type[N],
    #
    get_key: Callable[[N], Key]
    | Callable[[VisitorT, N], Key]
    | Callable[[VisitorT, N, MatchResult[N, *Args, Kwargs]], Key] = lambda node: node,
    #
    **kwargs: Unpack[PartialReducerOptions],
) -> Callable[
    [
        Callable[[N], Value]
        | Callable[[VisitorT, N], Value]
        | Callable[[VisitorT, N, MatchResult[N, *Args, Kwargs]], Value]
    ],
    NodeMapCollector[VisitorT, N, Key, Value, *Args, Kwargs],
]: ...
